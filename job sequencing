struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    static bool cmp(Job a,Job b)
    {
        return a.profit > b.profit;
    }
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 

        sort(arr,arr+n,cmp);
        
        int maxiDeadline=0;
        for(int i=0;i<n;i++)
        {
            maxiDeadline=max(maxiDeadline,arr[i].dead);
        }
        
        vector<int> schedule(maxiDeadline+1,-1);
        
        int cnt=0;
        int maxProfit=0;
        for(int i=0;i<n;i++)
        {
            int currProfit=arr[i].profit;
            int currJobid=arr[i].id;
            int currDead=arr[i].dead;
            
            for(int k=currDead;k>0;k--)
            {
                if(schedule[k]==-1)
                {
                    cnt++;
                    maxProfit+=currProfit;
                    schedule[k]=currJobid;
                    break;
                }
            }
        }
        
        return {cnt,maxProfit};
    } 
};
