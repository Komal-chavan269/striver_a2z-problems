class Node
{
    public :
    int data;
    Node* left;
    Node* right;
    
    Node(int d)
    {
        data=d;
        left=NULL;
        right=NULL;
    }
};
class cmp
{
    public:
    bool operator()(Node* a,Node* b)
    {
        return a->data > b->data;
    }
};
class Solution
{
	public:
	   void traverse(Node* root,vector<string>& ans,string temp)
	   {
	       if(root->left==NULL && root->right==NULL)
	       {
	           ans.push_back(temp);
	           return;
	       }
	       traverse(root->left,ans,temp+'0');
	       traverse(root->right,ans,temp+'1');
	       
	   }
		vector<string> huffmanCodes(string S,vector<int> f,int n)
		{
		    // Code here
		    priority_queue<Node*,vector<Node*>,cmp> pq;
		    
		    for(int i=0;i<n;i++)
		    {
		        Node* temp=new Node(f[i]);
		        pq.push(temp);
		    }
		    
		    while(pq.size()>1)
		    {
		        Node* left1=pq.top();
		        pq.pop();
		        
		        Node* right1=pq.top();
		        pq.pop();
		        
		        Node * newNode=new Node(left1->data+right1->data);
		        newNode->left=left1;
		        newNode->right=right1;
		        pq.push(newNode);
		    }
		    
		    Node* root=pq.top();
		    vector<string> ans;
		    string temp="";
		    traverse(root,ans,temp);
		    return ans;
		}
};
